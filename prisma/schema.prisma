// https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
    // And comment them out when using sqlite
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url      = env("DATABASE_URL")
}

model Profile {
    id          String     @id @default(cuid())
    displayName String?
    username    String     @unique
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
    userId      String     @unique
    posts       Post[]
    postLikes   PostLike[]
    echoes      Echo[]
    user        User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    role        Role       @default(USER)
}

model Post {
    id        String     @id @default(cuid())
    body      String
    createdAt DateTime   @default(now())
    authorId  String
    author    Profile    @relation(fields: [authorId], references: [id], onDelete: Cascade)
    postLikes PostLike[]
    echoes    Echo[]
}

model PostLike {
    id          String   @id @default(cuid())
    createdAt   DateTime @default(now())
    likedPostId String
    likerId     String
    likedPost   Post     @relation(fields: [likedPostId], references: [id], onDelete: Cascade)
    liker       Profile  @relation(fields: [likerId], references: [id], onDelete: Cascade)

    @@unique([likedPostId, likerId])
}

model Echo {
    id           String   @id @default(cuid())
    createdAt    DateTime @default(now())
    echoedPostId String
    echoerId     String // The profile Echoing someone else's post
    echoedPost   Post     @relation(fields: [echoedPostId], references: [id])
    echoer       Profile  @relation(fields: [echoerId], references: [id])

    @@unique([echoedPostId, echoerId])
}

// TODO: Community
// model Chamber {
// }

enum Role {
    USER
    MODERATOR
}

enum Theme {
    LIGHT
    DARK
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String    @id @default(cuid())
    name          String?
    email         String    @unique // I have to make this a required field to be able to create a custom Next auth adapter
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    profile       Profile?
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
